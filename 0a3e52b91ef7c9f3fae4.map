{"version":3,"sources":["/home/doodlily/React_Native/guess-a-number/constants/colors.js","/home/doodlily/React_Native/guess-a-number/components/Header.js","/home/doodlily/React_Native/guess-a-number/components/Card.js","/home/doodlily/React_Native/guess-a-number/components/Input.js","/home/doodlily/React_Native/guess-a-number/components/NumberContainer.js","/home/doodlily/React_Native/guess-a-number/screens/StartGameScreen.js","/home/doodlily/React_Native/guess-a-number/screens/GameScreen.js","/home/doodlily/React_Native/guess-a-number/screens/GameOverScreen.js","/home/doodlily/React_Native/guess-a-number/App.js","/home/doodlily/React_Native/guess-a-number/web-build/register-service-worker.js"],"names":["styles","StyleSheet","create","header","width","height","paddingTop","backgroundColor","Colors","alignItems","justifyContent","headerTitle","color","fontSize","textAlign","Header","props","View","style","Text","title","card","shadowColor","shadowOffset","shadowRadius","shadowOpacity","elevation","padding","borderBottomLeftRadius","borderBottomRightRadius","Card","children","input","borderBottomColor","borderBottomWidth","marginVertical","Input","TextInput","container","borderWidth","borderColor","borderRadius","number","NumberContainer","screen","flex","marginBottom","inputContainer","maxWidth","buttonContainer","flexDirection","paddingHorizontal","button","confirmContainer","marginTop","StartGameScreen","confirmedOutput","useState","enteredValue","setEnteredValue","confirmed","setConfirmed","selectedNumber","setSelectedNumber","resetInputHandler","Button","onPress","onStartGame","TouchableWithoutFeedback","Keyboard","dismiss","blurOnSubmit","autoCapitalize","autoCorrect","keyboardType","maxLength","onChangeText","inputText","replace","value","chosenNumber","parseInt","isNaN","Alert","alert","test","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","userChoice","currentGuess","setCurrentGuess","rounds","setRounds","currentLow","useRef","currentHigh","onGameOver","useEffect","nextGuessHandler","direction","text","current","nextNumber","currentRounds","bind","GameOverScreen","roundsNumber","userNumber","onRestart","App","setUserNumber","guessRounds","setGuessRounds","content","selectedNUmber","numOfRounds","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"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","file":"static/js/app.c00a6880.chunk.js","sourcesContent":["export default {\n  primary: \"#f7287b\",\n  accent: \"#086f84\"\n};","import * as React from 'react';\nimport { Text, View, StyleSheet, Image } from 'react-native';\n\nimport Colors from '../constants/colors';\n\nconst Header = props => {\n  return (\n    <View style= {styles.header}>\n      <Text style={styles.headerTitle}>{props.title}</Text>\n    </View>\n  );\n};\n\n\nconst styles = StyleSheet.create({\n  header: {\n    width: '100%' ,\n    height: 90 ,\n    paddingTop: 36,\n    backgroundColor: Colors.primary,\n    alignItems: 'center',\n    justifyContent:'center'\n  },\n  headerTitle: {\n    color: 'black',\n    fontSize: 18,\n    textAlign: 'center',\n    \n  }\n});\n\nexport default Header;\n","import * as React from 'react';\nimport { Text, View, StyleSheet, Image } from 'react-native';\n\nconst Card = props => {\n  return (\n    <View style= {{...styles.card, ...props.style}}>{props.children}</View>\n  );\n};\n\nconst styles= StyleSheet.create({\n  card: {\n    shadowColor: 'black',\n    shadowOffset: {width:0, height:2},\n    shadowRadius: 6,\n    shadowOpacity: 0.26,\n    elevation: 10,\n    backgroundColor: 'white',\n    padding: 20,\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10\n  }\n});\n\nexport default Card;","import * as React from 'react';\nimport { TextInput, View, StyleSheet, Image } from 'react-native';\n\nconst Input = props => {\n  return (\n    <TextInput {...props} style= {{...styles.input, ...props.style}} />\n  );\n};\n\nconst styles= StyleSheet.create({\n  input: {\n    height: 30,\n    borderBottomColor: 'grey',\n    borderBottomWidth: 1,\n    marginVertical: 10,\n  }\n});\n\nexport default Input;","import React from 'react';\nimport {View,Text,StyleSheet} from 'react-native';\n\nimport Colors from '../constants/colors';\n\nconst NumberContainer = props => {\n  return (\n    <View style={styles.container}>\n    <Text style={styles.number}>{props.children}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: 2,\n    borderColor: Colors.accent,\n    padding: 10,\n    borderRadius: 10,\n    marginVertical: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  number: {\n    color: Colors.accent,\n    fontSize: 22,\n    \n  }\n});\n\nexport default NumberContainer;\n","import React, {useState} from 'react';\nimport { Text, View, StyleSheet, Image, TextInput, Button, TouchableWithoutFeedback,Keyboard, Alert } from 'react-native';\n\nimport Card from '../components/Card';\nimport Input from '../components/Input';\nimport NumberContainer from '../components/NumberContainer';\nimport Colors from '../constants/colors';\n\nconst StartGameScreen = props => {\n  const [enteredValue, setEnteredValue] = useState('');\n  const [confirmed, setConfirmed] = useState(false);\n  const [selectedNumber, setSelectedNumber] = useState();\n  \n  const numberInputHandler = inputText => {\n    setEnteredValue(inputText.replace(/[^0-9]/g, ''));  \n  };\n  \n  const resetInputHandler = () => {\n    setEnteredValue('');\n    setConfirmed(false);\n  };\n  \n  const confirmInputHandler = () => {\n    const chosenNumber = parseInt(enteredValue);\n    if(isNaN(chosenNumber) || chosenNumber<=0 || chosenNumber>99) {\n      Alert.alert('Invalid Number!', 'Number has to be a number between 1 and 99.', [{test:'Okay', style: 'destructive', onPress: resetInputHandler}] );\n      return;\n    }\n    setConfirmed(true);\n    setSelectedNumber(chosenNumber);\n    setEnteredValue('');\n    Keyboard.dismiss();\n  };\n  \n  let confirmedOutput;\n  \n  if(confirmed) {\n    confirmedOutput= \n    <Card style={styles.confirmContainer}>\n    <Text> You Selected</Text>\n    <NumberContainer>{selectedNumber}</NumberContainer>\n    <Button \n      title=\"START GAME\" \n      color={Colors.primary} \n      onPress={() => props.onStartGame(selectedNumber)}\n    />\n    </Card>\n  }\n  \n  return (\n  <TouchableWithoutFeedback onPress= {()=>{\n    Keyboard.dismiss();\n  }}>\n  <View style= {styles.screen}>\n      <Text style={styles.title}>Start a New Game!</Text>\n    <Card style={styles.inputContainer}>\n      <Text>Select a Number</Text>\n      <Input \n        style={styles.input} \n        blurOnSubmit \n        autoCapitalize='none' \n        autoCorrect={false} \n        keyboardType=\"number-pad\" \n        maxLength= {2}\n        onChangeText= {numberInputHandler}\n        value= {enteredValue} />\n      <View style= {styles.buttonContainer}>\n      <View style={styles.button}>\n        <Button title=\"Reset\" onPress={resetInputHandler} color= {Colors.accent}/>\n      </View>\n      <View style={styles.button}>\n        <Button title=\"Confirm\" onPress={confirmInputHandler} color={Colors.primary} />\n      </View>\n     </View>\n    </Card>\n    {confirmedOutput}\n  </View>\n  </TouchableWithoutFeedback>\n  );\n};\n\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: 30,\n    marginVertical: 20,\n    marginBottom: 15\n  },\n  inputContainer: {\n    width: 300,\n    maxWidth: '80%',\n    alignItems:'center',\n   },\n   input: {\n    width: 50, \n    textAlign:'center'\n   },\n  buttonContainer: {\n    flexDirection: 'row',\n    width: '100%' ,\n    justifyContent: 'space-between',\n    paddingHorizontal: 15\n  },\n  button:\n  {\n    width:'40%',\n  },\n  confirmContainer: {\n    marginTop: 20,\n    alignItems: 'center',\n    \n  },\n});\n\nexport default StartGameScreen;","import React,{useState, useRef, useEffect} from 'react';\nimport {View,Text,StyleSheet,Button, Alert} from 'react-native';\n\nimport Colors from '../constants/colors';\nimport NumberContainer from '../components/NumberContainer';\nimport Card from '../components/Card';\n\nconst generateRandomBetween = (min,max,exclude) => {\n  min= Math.ceil(min);\n  max= Math.floor(max);\n  const rndNum= Math.floor(Math.random() * (max-min)) + min;\n  if(rndNum === exclude)\n  {\n    return generateRandomBetween(min,max,exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst GameScreen = props => {\n  const [currentGuess, setCurrentGuess] = useState(\n  generateRandomBetween(1,100,props.userChoice));\n  \n  const [rounds, setRounds] = useState(0);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n  \n  const {userChoice,onGameOver} = props;\n  \n  useEffect(()=> {\n    if(currentGuess=== userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n  \n  const nextGuessHandler = direction => {\n  if(direction==='lower'&& currentGuess< props.userChoice || (direction==='greater' && currentGuess> props.userChoice)) {\n    Alert.alert('Don\\'t Lie!', 'You know that this wrong...', [{text: 'Sorry', style:'cancel'}\n    ]);\n    return;\n  }\n  if(direction==='lower') {\n    currentHigh.current= currentGuess;\n  } else {\n    currentLow.current= currentGuess;\n  }\n  const nextNumber= generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n  setCurrentGuess(nextNumber);\n  setRounds(currentRounds => currentRounds+1);\n}\n  \n  return (\n    <View style={styles.screen}>\n    <Text>Opponent's Guess</Text>\n    <NumberContainer>{currentGuess}</NumberContainer>\n    <Card style= {styles.buttonContainer}>\n      <Button title=\"LOWER\" onPress= {nextGuessHandler.bind(this,'lower')} />\n      <Button title=\"GREATER\" onPress= {nextGuessHandler.bind(this,'greater')} />\n    </Card>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex:1,\n    padding:10,\n    alignItems:'center',\n    },\n  container: {\n    marginTop: 20,\n    alignItems: 'center',\n    },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20,\n    width: 300,\n    maxWidth: '80%',\n  }\n});\n\nexport default GameScreen;\n","import React,{useState, useRef, useEffect} from 'react';\nimport {View,Text,StyleSheet,Button, Alert} from 'react-native';\n\nconst GameOverScreen = props => {\n  return (\n    <View style={styles.screen}>\n      <Text>The Game is Over!</Text>\n      <Text>Number of Rounds: {props.roundsNumber}</Text>\n      <Text>Number was: {props.userNumber}</Text>\n      <Button title=\"NEW GAME\" onPress={props.onRestart} />\n    </View>\n  )\n};\n\nconst styles = StyleSheet.create( {\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default GameOverScreen;","import React, {useState} from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n\nimport Header from './components/Header';\nimport StartGameScreen from './screens/StartGameScreen';\nimport GameScreen from './screens/GameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\n\nexport default function App() {\n    const [userNumber,setUserNumber] = useState();\n    const [guessRounds, setGuessRounds] = useState(0);\n    \n    const configureNewGameHandler = () => {\n      setGuessRounds(0);\n      setUserNumber(null);\n    };\n    \n    const startGameHandler = (selectedNUmber) => {\n      setUserNumber(selectedNUmber);\n      setGuessRounds(0);\n    };\n    \n    const gameOverHandler = numOfRounds => {\n      setGuessRounds(numOfRounds);\n    };\n    \n    let content =  <StartGameScreen onStartGame={startGameHandler} />\n    if(userNumber && guessRounds<= 0) {\n      content= <GameScreen userChoice={userNumber} onGameOver={gameOverHandler} />\n    } else if(guessRounds>0) {\n      content= <GameOverScreen roundsNumber={guessRounds} userNumber={userNumber} onRestart={configureNewGameHandler} />\n    }\n    \n    return (\n      <View style={styles.screen}>\n       <Header title=\"Guess a Number\"/>\n       {content}\n      </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    \n  }\n \n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/Guess-Number/expo-service-worker.js', { scope: '/Guess-Number/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}